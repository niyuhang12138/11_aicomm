name: build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

permissions:
  contents: write

env:
  SUBDIRS: chat chatapp/src-tauri
  CARGO_TERM_COLOR: always

jobs:
  build-unix:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: ubuntu-latest,
              target: x86_64-unknown-linux-gnu,
              packages: "javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf",
            }
          - {
              os: macos-latest,
              target: x86_64-apple-darwin,
              packages: "gtk+3 webkit2gtk librsvg",
            }
    runs-on: ${{ matrix.config.os }}
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chatapp_test
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 20s
          -e POSTGRES_HOST_AUTH_METHOD=trust

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Postgres (macOS)
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install postgresql@14
          brew services start postgresql@14
          sleep 5
          psql postgres -c "CREATE USER postgres WITH SUPERUSER PASSWORD 'postgres'"
          psql postgres -c "CREATE DATABASE chatapp_test OWNER postgres"

      - name: Install Linux dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.config.packages }}

      - name: Install macOS dependencies
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install ${{ matrix.config.packages }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.target }}
          components: rustfmt, clippy, llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.target }}

      - name: Check code format
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo fmt --all -- --check
            cd $GITHUB_WORKSPACE
          done

      - name: Check the package for errors
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo check --all --target ${{ matrix.config.target }}
            cd $GITHUB_WORKSPACE
          done

      - name: Lint rust sources
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo clippy --all-targets --all-features --tests --benches --target ${{ matrix.config.target }} -- -D warnings
            cd $GITHUB_WORKSPACE
          done

      - name: Execute rust tests
        shell: bash
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/chatapp_test
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo nextest run --all-features --target ${{ matrix.config.target }}
            cd $GITHUB_WORKSPACE
          done

      - name: Build release binary
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo build --release --target ${{ matrix.config.target }}
            cd $GITHUB_WORKSPACE
          done

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}
          draft: true

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          components: rustfmt, clippy, llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - uses: Swatinem/rust-cache@v2
        with:
          key: x86_64-pc-windows-msvc

      - name: Check code format
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo fmt --all -- --check
            cd $GITHUB_WORKSPACE
          done

      - name: Check the package for errors
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo check --all --target x86_64-pc-windows-msvc
            cd $GITHUB_WORKSPACE
          done

      - name: Lint rust sources
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo clippy --all-targets --all-features --tests --benches --target x86_64-pc-windows-msvc -- -D warnings
            cd $GITHUB_WORKSPACE
          done

      - name: Execute rust tests
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo nextest run --all-features --target x86_64-pc-windows-msvc
            cd $GITHUB_WORKSPACE
          done

      - name: Build release binary
        shell: bash
        run: |
          for dir in ${{ env.SUBDIRS }}; do
            cd $dir && cargo build --release --target x86_64-pc-windows-msvc
            cd $GITHUB_WORKSPACE
          done

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}
          draft: true
