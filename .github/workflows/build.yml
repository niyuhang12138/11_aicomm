name: build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

permissions:
  contents: write

env:
  SUBDIRS: chat chatapp/src-tauri

jobs:
  build-rust:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest] # 添加 Windows 平台
    runs-on: ${{ matrix.platform }}

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Windows 依赖安装
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装 WebView2 运行时
          curl -L -o webview2.exe https://go.microsoft.com/fwlink/p/?LinkId=2124703
          Start-Process webview2.exe -ArgumentList "/silent /install" -Wait

          # 安装 Visual Studio 构建工具
          choco install visualstudio2022-workload-vctools -y

      # Linux 依赖安装（保持原样）
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            javascriptcoregtk-4.1 \
            libsoup-3.0 \
            webkit2gtk-4.1 \
            libgtk-3-dev \
            libsoup-3.0-dev

      - name: Install Rust
        run: |
          rustup toolchain install stable --component llvm-tools-preview
          # Windows 需要添加 target
          if [ "${{ matrix.platform }}" == "windows-latest" ]; then
            rustup target add x86_64-pc-windows-msvc
          fi

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: install nextest
        uses: taiki-e/install-action@nextest

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # 跨平台构建步骤
      - name: Build and test
        run: |
          # Windows 使用不同的路径分隔符
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            SUBDIRS=$(echo "${{ env.SUBDIRS }}" | tr ' ' ',')
            IFS=',' read -ra dirs <<< "$SUBDIRS"
          else
            IFS=' ' read -ra dirs <<< "${{ env.SUBDIRS }}"
          fi

          for dir in "${dirs[@]}"; do
            echo "Processing $dir"
            cd "$dir"

            # 公共步骤
            cargo fmt --all -- --check
            cargo check --all
            cargo clippy --all-targets --all-features --tests --benches -- -D warnings

            # Windows 需要特别处理
            if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
              # 设置 Windows 构建环境变量
              export RUSTFLAGS="-C target-feature=+crt-static"
              cargo nextest run --all-features --no-default-features
              cargo build --release --target x86_64-pc-windows-msvc
            else
              cargo nextest run --all-features
              cargo build --release
            fi

            cd ..
          done

      # Windows 打包步骤
      - name: Package Windows artifacts
        if: matrix.platform == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p release
          cd chatapp/src-tauri
          cargo tauri build --target x86_64-pc-windows-msvc --verbose
          cp target/x86_64-pc-windows-msvc/release/*.msi ../../release/
          cp target/x86_64-pc-windows-msvc/release/*.exe ../../release/
        shell: bash

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}
          files: |
            release/*.msi
            release/*.exe
            target/release/*.deb  # Linux 包
            target/release/*.app  # macOS 包
